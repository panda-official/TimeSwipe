name: Build Linux Packages
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docker/driver.*'
  workflow_run:
    workflows: ["Publish Docker timeswipe_arch", "Publish Docker timeswipe_ubuntu"]
    branches: [master]
    types:
      - completed
jobs:
  build_deb:
    runs-on: ubuntu-latest
    container: pandaofficial/timeswipe_ubuntu
    name: Build deb
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        id: build_project
        run: |
          mkdir build-driver-arm64
          cd build-driver-arm64
          cmake -DCMAKE_INSTALL_PREFIX=/usr -DPANDA_BUILD_ARM64=On -DCMAKE_VERBOSE_MAKEFILE=On ..
          cmake --build . --parallel `nproc`
          export destdir="$PWD"/timeswipe_`cat ../driver/version`.aarch64
          make -j DESTDIR=$destdir install
          cp -p -r driver/DEBIAN $destdir
          dpkg-deb --build $destdir
          echo ::set-output name=deb64::$(ls *.deb)
          cd ..
          mkdir build-driver-arm32
          cd build-driver-arm32
          cmake -DCMAKE_INSTALL_PREFIX=/usr -DPANDA_BUILD_ARM=On -DCMAKE_VERBOSE_MAKEFILE=On ..
          cmake --build . --parallel `nproc`
          export destdir="$PWD"/timeswipe_`cat ../driver/version`.armv7l
          make -j DESTDIR=$destdir install
          cp -p -r driver/DEBIAN $destdir
          dpkg-deb --build $destdir
          echo ::set-output name=deb32::$(ls *.deb)
          cd ..
      - name: Save deb32
        uses: actions/upload-artifact@v1
        with:
          name: deb32
          path: ./build-driver-arm32/${{ steps.build_project.outputs.deb32 }}
      - name: Save deb64
        uses: actions/upload-artifact@v1
        with:
          name: deb64
          path: ./build-driver-arm64/${{ steps.build_project.outputs.deb64 }}

  build_arch:
    name: Build arch
    runs-on: ubuntu-latest
    container: pandaofficial/timeswipe_arch
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        id: build_project
        run: |
          mkdir build-driver-arm64
          cd build-driver-arm64
          cmake -DCMAKE_INSTALL_PREFIX=/usr -DPANDA_BUILD_ARM64=On -DCMAKE_VERBOSE_MAKEFILE=On ..
          cmake --build . --parallel `nproc`
          chown -R build .
          sudo -u build sh -c "PKGEXT='.pkg.tar.xz' makepkg"
          echo ::set-output name=arch64::$(ls *.xz)
      - name: Save arch64
        uses: actions/upload-artifact@v1
        with:
          name: arch64
          path: ./build-driver-arm64/${{ steps.build_project.outputs.arch64 }}

  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    needs: [build_deb, build_arch]
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Load deb32
      uses: actions/download-artifact@v1
      with:
        name: deb32
    - name: Load deb64
      uses: actions/download-artifact@v1
      with:
        name: deb64
    - name: Load arch64
      uses: actions/download-artifact@v1
      with:
        name: arch64
    - name: Publish deb32
      uses: csexton/release-asset-action@v2
      with:
        pattern: "deb32/*"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Publish deb64
      uses: csexton/release-asset-action@v2
      with:
        pattern: "deb64/*"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Publish arch64
      uses: csexton/release-asset-action@v2
      with:
        pattern: "arch64/*"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
